-- 1. Chargement de la bibliothèque Rayfield (CORRIGÉ AVEC PCALL)
print("INFO GF: Tentative de chargement de Rayfield...")
local RayfieldObject -- Déclarer RayfieldObject ici pour qu'il soit accessible après le pcall

-- Ces variables recevront le statut et le résultat/erreur du pcall
local successRayfieldLoad, loadResultOrRayfield = pcall(function()
    local rawLibrarySource = game:HttpGet('https://raw.githubusercontent.com/ZzSamPiczZ/Test/refs/heads/main/Rayfield', true)
    if not rawLibrarySource or rawLibrarySource == "" then
        error("HttpGet a échoué : L'URL est peut-être incorrecte, inaccessible, ou a retourné une réponse vide.")
    end
    local loadedFunction, compileError = loadstring(rawLibrarySource)
    if not loadedFunction then
        error("loadstring a échoué : " .. tostring(compileError))
    end
    local instance = loadedFunction()
    if instance == nil then
        error("L'initialisation de Rayfield (fonction chargée) a retourné nil.")
    end
    return instance
end)

if not successRayfieldLoad or not loadResultOrRayfield then
    print("ERREUR CRITIQUE GF: Rayfield n'a pas pu être chargé ou initialisé.")
    print("Raison de l'échec (erreur réelle) :", tostring(loadResultOrRayfield))
    warn("Échec chargement Rayfield. Le script ne peut pas continuer.")
    return
end

RayfieldObject = loadResultOrRayfield 
print("INFO GF: Rayfield chargé avec succès. Type:", type(RayfieldObject))

if type(RayfieldObject) ~= "table" and type(RayfieldObject) ~= "userdata" then
    print("ERREUR CRITIQUE GF: Rayfield n'est pas du type attendu après le chargement. Type:", type(RayfieldObject))
    print("RayfieldObject contenu (pour débogage):", tostring(RayfieldObject))
    warn("Rayfield n'est pas une bibliothèque valide. Le script pourrait mal fonctionner.")
    return
end

-- 2. Définition de l'état initial et des configurations
print("GF: Initialisation de plantGridConfig et State...")
local carrotGridConfig = { startX = -29.0, endX = 2.0, startZ = -134.0, endZ = -120.0, yLevel = 0.1355254054069519, spacing = 1.5, seedToPlant = "Carrot"}
local bambooGridConfig = { startX = -28.5, endX = 1.0, startZ = -103.5, endZ = -91.0, yLevel = 0.1355254054069519, spacing = 2.0, seedToPlant = "Bamboo"}

local function generatePlantLocationsFromGrid(config)
    local locations = {} local count = 0
    for x = config.startX, config.endX, config.spacing do for z = config.startZ, config.endZ, config.spacing do
        table.insert(locations, {vector = Vector3.new(x, config.yLevel, z), seed = config.seedToPlant})
        count = count + 1
    end end
    print("INFO GF: " .. count .. " emplacements générés pour " .. config.seedToPlant .. " (espacement: " .. config.spacing .. ")")
    return locations
end

local State = {
    isAutoBuyingSeeds = false, selectedSeedsList = {}, currentSeedIndex_Seed = 1, autoBuySeedTask = nil, seedRemoteEvent = nil, 
    seedPurchaseInterval = 0.5, 
    seedOptions = {"Carrot","Strawberry","Blueberry","Orange Tulip","Tomato","Corn","Daffodil","Watermelon","Pumpkin","Apple","Bamboo","Coconut","Cactus","Dragon Fruit","Mango","Grape","Mushroom","Pepper","Cacao","Beanstalk"},
    isAutoBuyingGear = false, selectedGearList = {}, currentGearIndex_Gear = 1, autoBuyGearTask = nil, gearRemoteEvent = nil,
    gearPurchaseInterval = 0.7,   
    gearOptions = {"Watering Can","Trowel","Recall Wrench","Basic Sprinkler","Advanced Sprinkler","Godly Sprinkler","Lightning Rod","Master Sprinkler","Favorite Tool"},
    isAutoPlantingCarrots = false, autoPlantCarrotTask = nil, 
    carrotPlantCycleInterval = 60, carrotPlantBetweenPlotDelay = 0.2, 
    carrotPlantLocations = generatePlantLocationsFromGrid(carrotGridConfig),
    isAutoPlantingBamboo = false, autoPlantBambooTask = nil,
    bambooPlantCycleInterval = 45, bambooPlantBetweenPlotDelay = 0.25, 
    bambooPlantLocations = generatePlantLocationsFromGrid(bambooGridConfig),
    plantRemoteEvent = nil, nightQuestRemoteEvent = nil, sellInventoryRemoteEvent = nil
}
print("INFO GF: Table 'State' initialisée.")

-- 3. Fonctions d'assistance (Helpers)
local function notifyUser(title, content, duration, type) if RayfieldObject and RayfieldObject.Notify and type(RayfieldObject.Notify) == "function" then RayfieldObject:Notify({ Title = title or "Notification", Content = content or "", Duration = duration or 5, Type = type or "info" }) else print("NOTIFY (fallback):", title, content) end end
local function setupRemoteEvent(eventName, eventTypeForState, specificStateField)
    print("INFO GF: Configuration RemoteEvent pour '" .. eventName .. "'...")
    local success, remoteEventOrError = pcall(function() local r=game:GetService("ReplicatedStorage"):WaitForChild("GameEvents",20) if not r then error("GameEvents DNE") end local e=r:WaitForChild(eventName,20) if not e then error(eventName.." DNE in GameEvents") end return e end)
    if success and remoteEventOrError then State[specificStateField]=remoteEventOrError; print("INFO GF: RE '"..eventName.."' OK.") return true else print("ERREUR GF: RE '"..eventName.."' Échec:",tostring(remoteEventOrError)) notifyUser("Erreur RE "..eventTypeForState,"RE '"..eventName.."' introuvable.",15,"error") return false end
end
local function attemptItemPurchase(itemName,itemType) local re=(itemType=="seed")and State.seedRemoteEvent or State.gearRemoteEvent local tn=(itemType=="seed")and"Graine"or"Équipement" if not re then notifyUser("ERR Achat "..tn,"RE DNE.",5,"error")return false end if not itemName then return false end local s,e=pcall(function()re:FireServer(itemName)end) if not s then notifyUser("ERR Achat "..tn,"Échec:"..tostring(e),7,"warning") end return s end
local function attemptPlant(locVec,seedName) if not State.plantRemoteEvent then notifyUser("ERR Plant","RE Plant DNE.",5,"error")return false end if not locVec or not seedName then return false end local a={locVec,seedName} local s,e=pcall(function()State.plantRemoteEvent:FireServer(unpack(a))end) if not s then notifyUser("ERR Plant","Échec Plant:"..tostring(e),7,"warning") end return s end

-- 4. Logiques des boucles (maintenant formatées sur plusieurs lignes pour clarté)
local function autoBuySeedLoop()
    State.currentSeedIndex_Seed = 1
    while State.isAutoBuyingSeeds do
        if #State.selectedSeedsList > 0 then
            if State.currentSeedIndex_Seed > #State.selectedSeedsList or State.currentSeedIndex_Seed < 1 then
                State.currentSeedIndex_Seed = 1 -- Réinitialiser l'index s'il est hors limites
            end
            local seedName = State.selectedSeedsList[State.currentSeedIndex_Seed]
            if seedName then
                attemptItemPurchase(seedName, "seed")
                State.currentSeedIndex_Seed = State.currentSeedIndex_Seed + 1
            else
                State.currentSeedIndex_Seed = 1 -- Fallback, réinitialiser l'index
            end
        end
        task.wait(State.seedPurchaseInterval)
        if not State.isAutoBuyingSeeds then
            -- OK: break est à l'intérieur de la boucle while
            break
        end
    end -- Fin de la boucle while
    State.autoBuySeedTask = nil
end

local function autoBuyGearLoop()
    State.currentGearIndex_Gear = 1
    while State.isAutoBuyingGear do
        if #State.selectedGearList > 0 then
            if State.currentGearIndex_Gear > #State.selectedGearList or State.currentGearIndex_Gear < 1 then
                State.currentGearIndex_Gear = 1 -- Réinitialiser l'index s'il est hors limites
            end
            local gearName = State.selectedGearList[State.currentGearIndex_Gear]
            if gearName then
                attemptItemPurchase(gearName, "gear")
                State.currentGearIndex_Gear = State.currentGearIndex_Gear + 1
            else
                State.currentGearIndex_Gear = 1 -- Fallback, réinitialiser l'index
            end
        end
        task.wait(State.gearPurchaseInterval)
        if not State.isAutoBuyingGear then
            -- OK: break est à l'intérieur de la boucle while
            break
        end
    end -- Fin de la boucle while
    State.autoBuyGearTask = nil
end

local function autoPlantCarrotLoop()
    while State.isAutoPlantingCarrots do
        if #State.carrotPlantLocations == 0 then
            notifyUser("Info AutoPCrt", "Aucun emplacement défini pour les carottes, arrêt.", 7, "warning")
            State.isAutoPlantingCarrots = false
            -- OK: break est à l'intérieur de la boucle while
            break 
        end
        
        for _, pD in ipairs(State.carrotPlantLocations) do
            if not State.isAutoPlantingCarrots then
                -- OK: break est à l'intérieur de la boucle for (qui est dans while)
                break 
            end
            attemptPlant(pD.vector, pD.seed)
            if not State.isAutoPlantingCarrots then
                -- OK: break est à l'intérieur de la boucle for
                break 
            end
            task.wait(State.carrotPlantBetweenPlotDelay)
        end -- Fin de la boucle for
        
        if not State.isAutoPlantingCarrots then
            -- OK: break est à l'intérieur de la boucle while (si la boucle 'for' a été interrompue)
            break 
        end
        
        task.wait(State.carrotPlantCycleInterval)
        
        if not State.isAutoPlantingCarrots then
            -- OK: break est à l'intérieur de la boucle while (si l'état a changé pendant la longue attente)
            break 
        end
    end -- Fin de la boucle while
    State.autoPlantCarrotTask = nil
end

local function autoPlantBambooLoop()
    while State.isAutoPlantingBamboo do
        if #State.bambooPlantLocations == 0 then
            notifyUser("Info AutoPBmb", "Aucun emplacement défini pour le bambou, arrêt.", 7, "warning")
            State.isAutoPlantingBamboo = false
            -- OK: break est à l'intérieur de la boucle while
            break 
        end
        
        for _, pD in ipairs(State.bambooPlantLocations) do
            if not State.isAutoPlantingBamboo then
                -- OK: break est à l'intérieur de la boucle for (qui est dans while)
                break 
            end
            attemptPlant(pD.vector, pD.seed)
            if not State.isAutoPlantingBamboo then
                -- OK: break est à l'intérieur de la boucle for
                break 
            end
            task.wait(State.bambooPlantBetweenPlotDelay)
        end -- Fin de la boucle for
        
        if not State.isAutoPlantingBamboo then
            -- OK: break est à l'intérieur de la boucle while (si la boucle 'for' a été interrompue)
            break 
        end
        
        task.wait(State.bambooPlantCycleInterval)
        
        if not State.isAutoPlantingBamboo then
            -- OK: break est à l'intérieur de la boucle while (si l'état a changé pendant la longue attente)
            break 
        end
    end -- Fin de la boucle while
    State.autoPlantBambooTask = nil
end

-- 5. Fonctions de rappel (Callbacks)
local function onSelectedSeedsChanged(o) if o then State.selectedSeedsList=o State.currentSeedIndex_Seed=1 end end
local function onAutoBuySeedsToggleChanged(v,t)State.isAutoBuyingSeeds=v if v then if not State.seedRemoteEvent then notifyUser("ERR AutoS","RemoteEvent pour graines non trouvé!",7,"error")State.isAutoBuyingSeeds=false if t and typeof(t.SetValue)=="function"then t:SetValue(false)end return end if #State.selectedSeedsList == 0 then notifyUser("Info AutoS","Aucune graine sélectionnée pour l'achat auto.",5,"info") State.isAutoBuyingSeeds=false if t and typeof(t.SetValue)=="function"then t:SetValue(false)end return end State.autoBuySeedTask=task.spawn(autoBuySeedLoop)end end
local function onSelectedGearChanged(o) if o then State.selectedGearList=o State.currentGearIndex_Gear=1 end end
local function onAutoBuyGearToggleChanged(v,t)State.isAutoBuyingGear=v if v then if not State.gearRemoteEvent then notifyUser("ERR AutoG","RemoteEvent pour équipements non trouvé!",7,"error")State.isAutoBuyingGear=false if t and typeof(t.SetValue)=="function"then t:SetValue(false)end return end if #State.selectedGearList == 0 then notifyUser("Info AutoG","Aucun équipement sélectionné pour l'achat auto.",5,"info") State.isAutoBuyingGear=false if t and typeof(t.SetValue)=="function"then t:SetValue(false)end return end State.autoBuyGearTask=task.spawn(autoBuyGearLoop)end end
local function onAutoPlantCarrotToggleChanged(v,t)State.isAutoPlantingCarrots=v if v then if not State.plantRemoteEvent then notifyUser("ERR AutoPCrt","RemoteEvent pour planter non trouvé!",7,"error")State.isAutoPlantingCarrots=false if t and typeof(t.SetValue)=="function"then t:SetValue(false)end return end if #State.carrotPlantLocations==0 then notifyUser("Info AutoPCrt","Aucun emplacement défini pour les carottes.",5,"warn")State.isAutoPlantingCarrots=false if t and typeof(t.SetValue)=="function"then t:SetValue(false)end return end State.autoPlantCarrotTask=task.spawn(autoPlantCarrotLoop)end end
local function onAutoPlantBambooToggleChanged(v,t)State.isAutoPlantingBamboo=v if v then if not State.plantRemoteEvent then notifyUser("ERR AutoPBmb","RemoteEvent pour planter non trouvé!",7,"error")State.isAutoPlantingBamboo=false if t and typeof(t.SetValue)=="function"then t:SetValue(false)end return end if #State.bambooPlantLocations==0 then notifyUser("Info AutoPBmb","Aucun emplacement défini pour le bambou.",5,"warn")State.isAutoPlantingBamboo=false if t and typeof(t.SetValue)=="function"then t:SetValue(false)end return end State.autoPlantBambooTask=task.spawn(autoPlantBambooLoop)end end

-- 6. Initialisation de l'interface Rayfield
print("INFO GF: Tentative de création de la fenêtre Rayfield...")
local successWindow, windowOrErr = pcall(function()
    return RayfieldObject:CreateWindow({
        Name = "Gestionnaire Ferme Ultime (v3.0 GrosFix)", 
        Icon = 0, LoadingTitle = "Chargement...", LoadingSubtitle = "Interface Stabilisée",
        Theme = "Default",
        ConfigurationSaving = { Enabled = true, FolderName = "FarmManager_GrosFix_Config", FileName = "Settings_GrosFix_v1" }
    })
end)
if not successWindow or not windowOrErr then print("ERREUR GF: Rayfield:CreateWindow échec:",tostring(windowOrErr)) notifyUser("Erreur Rayfield","Fenêtre non créée: "..tostring(windowOrErr),20,"error") return end
local WindowObject = windowOrErr
print("INFO GF: Fenêtre Rayfield créée. Type:", type(WindowObject))

print("INFO GF: Initialisation des RemoteEvents...")
setupRemoteEvent("BuySeedStock", "Graines", "seedRemoteEvent")
setupRemoteEvent("BuyGearStock", "Équipements", "gearRemoteEvent")
setupRemoteEvent("Plant_RE", "Plantation", "plantRemoteEvent")
setupRemoteEvent("NightQuestRemoteEvent", "QuêteNocturne", "nightQuestRemoteEvent")
setupRemoteEvent("Sell_Inventory", "VenteInventaire", "sellInventoryRemoteEvent")
print("INFO GF: Fin initialisation RemoteEvents.")

print("INFO GF: Tentative de création de l'onglet principal...")
local successTab, tabOrErr = pcall(function() return WindowObject:CreateTab("Actions Ferme Complètes", nil) end)
if not successTab or not tabOrErr then print("ERREUR GF: Window:CreateTab échec:",tostring(tabOrErr)) notifyUser("Erreur Rayfield","Onglet non créé: "..tostring(tabOrErr),20,"error") return end
local MainTabObject = tabOrErr
print("INFO GF: Onglet principal créé. Type:", type(MainTabObject))

local uiCreationSuccess = true 
local function createUIElement(elementType, config)
    local success, elementOrErr = pcall(function()
        if elementType == "Dropdown" then return MainTabObject:CreateDropdown(config)
        elseif elementType == "Toggle" then return MainTabObject:CreateToggle(config)
        elseif elementType == "Button" then return MainTabObject:CreateButton(config)
        end
    end)
    if not success or not elementOrErr then
        print("ERREUR GF UI: Échec création '"..config.Name.."' ("..elementType.."). Erreur:", tostring(elementOrErr))
        notifyUser("Erreur UI", "Échec création '"..config.Name.."': "..tostring(elementOrErr), 7, "error")
        uiCreationSuccess = false
        return nil
    else
        print("INFO GF UI: Élément '"..config.Name.."' ("..elementType..") créé. Type:", type(elementOrErr))
        if elementType == "Dropdown" and elementOrErr and typeof(elementOrErr.SetEnabled) == "function" then elementOrErr:SetEnabled(true) end
        return elementOrErr
    end
end

print("INFO GF: Création UI Graines...")
local SeedDropdown = createUIElement("Dropdown", { Name = "Graines (multi):", Options = State.seedOptions, CurrentOption = State.selectedSeedsList, MultipleOptions = true, Flag = "GF_SeedsDrop_v3", Callback = onSelectedSeedsChanged })
local AutoBuySeedsToggle = createUIElement("Toggle", { Name = "Auto-Achat Graines", CurrentValue = State.isAutoBuyingSeeds, Flag = "GF_AutoBuySeeds_v3", Callback = function(v) onAutoBuySeedsToggleChanged(v, AutoBuySeedsToggle) end })

print("INFO GF: Création UI Équipements...")
local GearDropdown = createUIElement("Dropdown", { Name = "Équipements (multi):", Options = State.gearOptions, CurrentOption = State.selectedGearList, MultipleOptions = true, Flag = "GF_GearDrop_v3", Callback = onSelectedGearChanged })
local AutoBuyGearToggle = createUIElement("Toggle", { Name = "Auto-Achat Équipements", CurrentValue = State.isAutoBuyingGear, Flag = "GF_AutoBuyGear_v3", Callback = function(v) onAutoBuyGearToggleChanged(v, AutoBuyGearToggle) end })

print("INFO GF: Création UI Plantation...")
local AutoPlantCarrotToggle = createUIElement("Toggle", { Name = "Auto-Plantation Zone (" .. carrotGridConfig.seedToPlant .. ")", CurrentValue = State.isAutoPlantingCarrots, Flag = "GF_AutoPlantCarrot_v3", Callback = function(v) onAutoPlantCarrotToggleChanged(v, AutoPlantCarrotToggle) end })
local AutoPlantBambooToggle = createUIElement("Toggle", { Name = "Auto-Plantation Zone (" .. bambooGridConfig.seedToPlant .. ")", CurrentValue = State.isAutoPlantingBamboo, Flag = "GF_AutoPlantBamboo_v3", Callback = function(v) onAutoPlantBambooToggleChanged(v, AutoPlantBambooToggle) end })

print("INFO GF: Création UI Actions Diverses...")
if State.nightQuestRemoteEvent then
    createUIElement("Button", { Name = "Soumettre Plantes (Nuit)", Flag = "GF_SubmitNQ_v3", Callback = function() if State.nightQuestRemoteEvent then local s,e=pcall(function()State.nightQuestRemoteEvent:FireServer("SubmitAllPlants")end) notifyUser("Quête Nuit",s and "Envoyé."or"Échec:"..tostring(e),s and 3 or 7,s and"info"or"error") else notifyUser("ERR Quête Nuit","RE DNE",5,"error")end end })
else notifyUser("Info Action","Quête Nuit non dispo (RE DNE)",7,"warning") end

if State.sellInventoryRemoteEvent then
    createUIElement("Button", { Name = "Vendre l'Inventaire", Flag = "GF_SellInv_v3", Callback = function() if State.sellInventoryRemoteEvent then local s,e=pcall(function()State.sellInventoryRemoteEvent:FireServer()end) notifyUser("Vente Inventaire",s and"Envoyé."or"Échec:"..tostring(e),s and 3 or 7,s and"info"or"error") else notifyUser("ERR Vente Inv","RE DNE",5,"error")end end })
else notifyUser("Info Action","Vente Inventaire non dispo (RE DNE)",7,"warning") end

-- 7. Notifications et messages de fin
if uiCreationSuccess then
    notifyUser("Interface Prête","Gestionnaire Ferme (GrosFix) prêt.",7,"success")
else
    notifyUser("Erreur Interface","Certains éléments UI n'ont pas pu être créés. Vérifiez la console F9.",10,"error")
end
print("--- Script Gestionnaire Ferme Ultime (v3.0 GrosFix) Initialisation Terminée ---")
